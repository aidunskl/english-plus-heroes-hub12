import { useState, useEffect } from "react";
import Navigation from "@/components/Navigation";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { ArrowLeft, RotateCcw, Trophy, Timer, MapPin, CheckCircle, XCircle, Lightbulb } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

interface CountryRiddle {
  id: number;
  hints: string[];
  correctAnswer: string;
  flag: string;
  capital: string;
  continent: string;
  explanation: string;
}

const countryRiddles: CountryRiddle[] = [
  {
    id: 1,
    hints: [
      "–ë“±–ª –µ–ª –ê–∑–∏—è–¥–∞ –æ—Ä–Ω–∞–ª–∞—Å“õ–∞–Ω",
      "–ï“£ –∫”©–ø —Ö–∞–ª“õ—ã –±–∞—Ä –µ–ª",
      "“Æ–Ω–¥—ñ –º“±—Ö–∏—Ç—ã–Ω—ã“£ –∂–∞“ì–∞—Å—ã–Ω–¥–∞",
      "“ö—ã—Ç–∞–π —Ç—ñ–ª—ñ —Å”©–π–ª–µ–π–¥—ñ"
    ],
    correctAnswer: "China",
    flag: "üá®üá≥",
    capital: "Beijing",
    continent: "Asia",
    explanation: "“ö—ã—Ç–∞–π - –¥“Ø–Ω–∏–µ–∂“Ø–∑—ñ–Ω–¥–µ–≥—ñ –µ“£ –∫”©–ø —Ö–∞–ª“õ—ã –±–∞—Ä –µ–ª"
  },
  {
    id: 2,
    hints: [
      "–ë“±–ª –µ–ª –ï—É—Ä–æ–ø–∞–¥–∞ –æ—Ä–Ω–∞–ª–∞—Å“õ–∞–Ω",
      "–ü–∏—Ü—Ü–∞ –º–µ–Ω –ø–∞—Å—Ç–∞–Ω—ã“£ –æ—Ç–∞–Ω—ã",
      "–†–∏–º “õ–∞–ª–∞—Å—ã –æ—Å—ã –µ–ª–¥–µ",
      "–ò—Ç–∞–ª—å—è–Ω —Ç—ñ–ª—ñ —Å”©–π–ª–µ–π–¥—ñ"
    ],
    correctAnswer: "Italy",
    flag: "üáÆüáπ",
    capital: "Rome",
    continent: "Europe",
    explanation: "–ò—Ç–∞–ª–∏—è - –ø–∏—Ü—Ü–∞ –º–µ–Ω –ø–∞—Å—Ç–∞–Ω—ã“£ –æ—Ç–∞–Ω—ã"
  },
  {
    id: 3,
    hints: [
      "–ë“±–ª –µ–ª –°–æ–ª—Ç“Ø—Å—Ç—ñ–∫ –ê–º–µ—Ä–∏–∫–∞–¥–∞",
      "–ï“£ –∫”©–ø —Ö–∞–ª“õ—ã –±–∞—Ä –µ–ª",
      "–í–∞—à–∏–Ω–≥—Ç–æ–Ω –∞—Å—Ç–∞–Ω–∞—Å—ã",
      "–ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ —Å”©–π–ª–µ–π–¥—ñ"
    ],
    correctAnswer: "United States",
    flag: "üá∫üá∏",
    capital: "Washington",
    continent: "North America",
    explanation: "–ê“ö–® - –°–æ–ª—Ç“Ø—Å—Ç—ñ–∫ –ê–º–µ—Ä–∏–∫–∞–¥–∞“ì—ã –µ“£ –∫”©–ø —Ö–∞–ª“õ—ã –±–∞—Ä –µ–ª"
  },
  {
    id: 4,
    hints: [
      "–ë“±–ª –µ–ª –û“£—Ç“Ø—Å—Ç—ñ–∫ –ê–º–µ—Ä–∏–∫–∞–¥–∞",
      "–ü–æ—Ä—Ç—É–≥–∞–ª —Ç—ñ–ª—ñ —Å”©–π–ª–µ–π–¥—ñ",
      "–†–∏–æ-–¥–µ-–ñ–∞–Ω–µ–π—Ä–æ “õ–∞–ª–∞—Å—ã",
      "–§—É—Ç–±–æ–ª–Ω—ã“£ –æ—Ç–∞–Ω—ã"
    ],
    correctAnswer: "Brazil",
    flag: "üáßüá∑",
    capital: "Brasilia",
    continent: "South America",
    explanation: "–ë—Ä–∞–∑–∏–ª–∏—è - —Ñ—É—Ç–±–æ–ª–Ω—ã“£ –æ—Ç–∞–Ω—ã –∂”ô–Ω–µ –û“£—Ç“Ø—Å—Ç—ñ–∫ –ê–º–µ—Ä–∏–∫–∞–¥–∞“ì—ã –µ“£ “Ø–ª–∫–µ–Ω –µ–ª"
  },
  {
    id: 5,
    hints: [
      "–ë“±–ª –µ–ª –ê–∑–∏—è–¥–∞ –æ—Ä–Ω–∞–ª–∞—Å“õ–∞–Ω",
      "–°–∞–º—É—Ä–∞–π–ª–∞—Ä–¥—ã“£ –æ—Ç–∞–Ω—ã",
      "–¢–æ–∫–∏–æ –∞—Å—Ç–∞–Ω–∞—Å—ã",
      "–ñ–∞–ø–æ–Ω —Ç—ñ–ª—ñ —Å”©–π–ª–µ–π–¥—ñ"
    ],
    correctAnswer: "Japan",
    flag: "üáØüáµ",
    capital: "Tokyo",
    continent: "Asia",
    explanation: "–ñ–∞–ø–æ–Ω–∏—è - —Å–∞–º—É—Ä–∞–π–ª–∞—Ä–¥—ã“£ –æ—Ç–∞–Ω—ã –∂”ô–Ω–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–ª—ã“õ –¥–∞–º—ã“ì–∞–Ω –µ–ª"
  },
  {
    id: 6,
    hints: [
      "–ë“±–ª –µ–ª –ï—É—Ä–æ–ø–∞–¥–∞ –æ—Ä–Ω–∞–ª–∞—Å“õ–∞–Ω",
      "–ü–∏—Ü—Ü–∞ –º–µ–Ω –ø–∞—Å—Ç–∞–Ω—ã“£ –æ—Ç–∞–Ω—ã",
      "–ú–∞–¥—Ä–∏–¥ –∞—Å—Ç–∞–Ω–∞—Å—ã",
      "–ò—Å–ø–∞–Ω —Ç—ñ–ª—ñ —Å”©–π–ª–µ–π–¥—ñ"
    ],
    correctAnswer: "Spain",
    flag: "üá™üá∏",
    capital: "Madrid",
    continent: "Europe",
    explanation: "–ò—Å–ø–∞–Ω–∏—è - —Ñ–ª–∞–º–µ–Ω–∫–æ –º–µ–Ω –∫–æ—Ä—Ä–∏–¥–∞–Ω—ã“£ –æ—Ç–∞–Ω—ã"
  },
  {
    id: 7,
    hints: [
      "–ë“±–ª –µ–ª –ê—Ñ—Ä–∏–∫–∞–¥–∞ –æ—Ä–Ω–∞–ª–∞—Å“õ–∞–Ω",
      "–ü–∏—Ä–∞–º–∏–¥–∞–ª–∞—Ä–¥—ã“£ –æ—Ç–∞–Ω—ã",
      "–ö–∞–∏—Ä –∞—Å—Ç–∞–Ω–∞—Å—ã",
      "–ê—Ä–∞–± —Ç—ñ–ª—ñ —Å”©–π–ª–µ–π–¥—ñ"
    ],
    correctAnswer: "Egypt",
    flag: "üá™üá¨",
    capital: "Cairo",
    continent: "Africa",
    explanation: "–ú—ã—Å—ã—Ä - –ø–∏—Ä–∞–º–∏–¥–∞–ª–∞—Ä–¥—ã“£ –æ—Ç–∞–Ω—ã –∂”ô–Ω–µ –µ–∂–µ–ª–≥—ñ —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏—è"
  },
  {
    id: 8,
    hints: [
      "–ë“±–ª –µ–ª –ï—É—Ä–æ–ø–∞–¥–∞ –æ—Ä–Ω–∞–ª–∞—Å“õ–∞–Ω",
      "–ë–µ—Ä–ª–∏–Ω –∞—Å—Ç–∞–Ω–∞—Å—ã",
      "–ù–µ–º—ñ—Å —Ç—ñ–ª—ñ —Å”©–π–ª–µ–π–¥—ñ",
      "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–¥–µ—Ä–¥—ñ“£ –æ—Ç–∞–Ω—ã"
    ],
    correctAnswer: "Germany",
    flag: "üá©üá™",
    capital: "Berlin",
    continent: "Europe",
    explanation: "–ì–µ—Ä–º–∞–Ω–∏—è - BMW, Mercedes –∂”ô–Ω–µ –±–∞—Å“õ–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–¥–µ—Ä–¥—ñ“£ –æ—Ç–∞–Ω—ã"
  }
];

const GuessTheCountry = () => {
  const navigate = useNavigate();
  const [currentRiddle, setCurrentRiddle] = useState(0);
  const [userAnswer, setUserAnswer] = useState("");
  const [score, setScore] = useState(0);
  const [time, setTime] = useState(0);
  const [isGameActive, setIsGameActive] = useState(false);
  const [isComplete, setIsComplete] = useState(false);
  const [currentHint, setCurrentHint] = useState(0);
  const [attempts, setAttempts] = useState(0);
  const [showAnswer, setShowAnswer] = useState(false);

  useEffect(() => {
    if (isGameActive && !isComplete) {
      const interval = setInterval(() => {
        setTime((prev) => prev + 1);
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [isGameActive, isComplete]);

  const startGame = () => {
    setCurrentRiddle(0);
    setUserAnswer("");
    setScore(0);
    setTime(0);
    setIsGameActive(true);
    setIsComplete(false);
    setCurrentHint(0);
    setAttempts(0);
    setShowAnswer(false);
    toast.success("–û–π—ã–Ω –±–∞—Å—Ç–∞–ª–¥—ã! üéÆ");
  };

  const showNextHint = () => {
    if (currentHint < countryRiddles[currentRiddle].hints.length - 1) {
      setCurrentHint(prev => prev + 1);
    } else {
      toast.info("–ë–∞—Ä–ª—ã“õ –∫”©–º–µ–∫ –∫”©—Ä—Å–µ—Ç—ñ–ª–¥—ñ!");
    }
  };

  const checkAnswer = () => {
    if (!userAnswer.trim()) {
      toast.error("–ñ–∞—É–∞–ø—Ç—ã –∂–∞–∑—ã“£—ã–∑!");
      return;
    }

    setAttempts(prev => prev + 1);
    const correctAnswer = countryRiddles[currentRiddle].correctAnswer.toLowerCase();
    const userInput = userAnswer.toLowerCase().trim();
    
    if (userInput === correctAnswer) {
      setScore(prev => prev + 1);
      toast.success("–î“±—Ä—ã—Å! üéâ");
      setShowAnswer(true);
      
      setTimeout(() => {
        if (currentRiddle < countryRiddles.length - 1) {
          setCurrentRiddle(prev => prev + 1);
          setUserAnswer("");
          setCurrentHint(0);
          setShowAnswer(false);
        } else {
          setIsComplete(true);
          setIsGameActive(false);
          toast.success(`–û–π—ã–Ω –∞—è“õ—Ç–∞–ª–¥—ã! “∞–ø–∞–π: ${score + 1}/${countryRiddles.length}`);
        }
      }, 3000);
    } else {
      toast.error("“ö–∞—Ç–µ, —Ç–∞“ì—ã –∫”©—Ä—ñ“£—ñ–∑");
      if (currentHint < countryRiddles[currentRiddle].hints.length - 1) {
        setCurrentHint(prev => prev + 1);
      }
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, "0")}`;
  };

  const resetGame = () => {
    startGame();
  };

  const getAccuracy = () => {
    return Math.round((score / (currentRiddle + 1)) * 100);
  };

  return (
    <div className="min-h-screen bg-background">
      <Navigation />

      <div className="container mx-auto px-4 py-12">
        <div className="max-w-4xl mx-auto">
          <Button
            variant="ghost"
            onClick={() => navigate("/games")}
            className="mb-6"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            –ê—Ä—Ç“õ–∞
          </Button>

          <Card className="p-8 mb-6 bg-gradient-card">
            <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4 mb-6">
              <div>
                <Badge className="mb-4" variant="secondary">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ –æ–π—ã–Ω</Badge>
                <h1 className="text-3xl font-bold mb-2">
                  Guess the Country - –ñ–∞—Å—ã—Ä—ã–Ω –µ–ª–¥—ñ —Ç–∞–±—É –æ–π—ã–Ω—ã
                </h1>
                <p className="text-muted-foreground">
                  –ö”©–º–µ–∫—Ç–µ—Ä –±–æ–π—ã–Ω—à–∞ –µ–ª–¥–µ—Ä–¥—ñ —Ç–∞–±—ã“£—ã–∑
                </p>
              </div>
              <Button onClick={resetGame} variant="outline" className="gap-2">
                <RotateCcw className="w-4 h-4" />
                “ö–∞–π—Ç–∞ –±–∞—Å—Ç–∞—É
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <Trophy className="w-4 h-4 text-success" />
                <span>“∞–ø–∞–π: {score}/{countryRiddles.length}</span>
              </Badge>
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <Timer className="w-4 h-4 text-primary" />
                <span>–£–∞“õ—ã—Ç: {formatTime(time)}</span>
              </Badge>
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <span>–ñ–∞—Å—ã—Ä—ã–Ω: {currentRiddle + 1}/{countryRiddles.length}</span>
              </Badge>
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <span>–î”ô–ª–¥—ñ–∫: {getAccuracy()}%</span>
              </Badge>
            </div>
          </Card>

          {!isGameActive && !isComplete && (
            <Card className="p-8 text-center mb-6">
              <h2 className="text-2xl font-bold mb-4">–ñ–∞—Å—ã—Ä—ã–Ω –µ–ª–¥—ñ —Ç–∞–±—É –æ–π—ã–Ω—ã</h2>
              <p className="text-muted-foreground mb-6">
                –ö”©–º–µ–∫—Ç–µ—Ä –±–æ–π—ã–Ω—à–∞ –µ–ª–¥–µ—Ä–¥—ñ —Ç–∞–±—ã“£—ã–∑
              </p>
              <Button onClick={startGame} size="lg" className="gap-2">
                <MapPin className="w-5 h-5" />
                –û–π—ã–Ω–¥—ã –±–∞—Å—Ç–∞—É
              </Button>
            </Card>
          )}

          {isGameActive && !isComplete && (
            <Card className="p-8 mb-6">
              <div className="text-center mb-8">
                <h2 className="text-xl font-bold mb-4">
                  –ñ–∞—Å—ã—Ä—ã–Ω {currentRiddle + 1}/{countryRiddles.length}
                </h2>
                <p className="text-muted-foreground mb-6">
                  –ö”©–º–µ–∫—Ç–µ—Ä –±–æ–π—ã–Ω—à–∞ –µ–ª–¥—ñ —Ç–∞–±—ã“£—ã–∑
                </p>
              </div>

              <div className="space-y-6">
                <div className="bg-blue-50 dark:bg-blue-950 p-6 rounded-lg">
                  <h3 className="font-bold text-lg mb-4 flex items-center gap-2">
                    <Lightbulb className="w-5 h-5" />
                    –ö”©–º–µ–∫ {currentHint + 1}/{countryRiddles[currentRiddle].hints.length}
                  </h3>
                  <p className="text-blue-800 dark:text-blue-200 text-lg">
                    {countryRiddles[currentRiddle].hints[currentHint]}
                  </p>
                </div>

                <div className="flex gap-4 justify-center">
                  <Button 
                    onClick={showNextHint}
                    variant="outline"
                    className="gap-2"
                    disabled={currentHint >= countryRiddles[currentRiddle].hints.length - 1}
                  >
                    <Lightbulb className="w-4 h-4" />
                    –ö–µ–ª–µ—Å—ñ –∫”©–º–µ–∫
                  </Button>
                </div>

                <div className="flex gap-4 justify-center">
                  <Input
                    value={userAnswer}
                    onChange={(e) => setUserAnswer(e.target.value)}
                    placeholder="–ï–ª–¥—ñ“£ –∞—Ç—ã–Ω –æ—Å—ã –∂–µ—Ä–≥–µ –∂–∞–∑—ã“£—ã–∑..."
                    className="text-lg max-w-xs"
                    onKeyPress={(e) => e.key === 'Enter' && checkAnswer()}
                  />
                  
                  <Button onClick={checkAnswer} className="gap-2">
                    <CheckCircle className="w-4 h-4" />
                    –¢–µ–∫—Å–µ—Ä—É
                  </Button>
                </div>
              </div>

              {showAnswer && (
                <div className="bg-green-50 dark:bg-green-950 p-6 rounded-lg mt-6">
                  <div className="flex items-center gap-4 mb-4">
                    <div className="text-4xl">{countryRiddles[currentRiddle].flag}</div>
                    <div>
                      <h3 className="font-bold text-xl">{countryRiddles[currentRiddle].correctAnswer}</h3>
                      <p className="text-green-800 dark:text-green-200">
                        –ê—Å—Ç–∞–Ω–∞: {countryRiddles[currentRiddle].capital}
                      </p>
                      <p className="text-green-800 dark:text-green-200">
                        “ö“±—Ä–ª—ã“õ: {countryRiddles[currentRiddle].continent}
                      </p>
                    </div>
                  </div>
                  <p className="text-green-800 dark:text-green-200">
                    <strong>–¢“Ø—Å—ñ–Ω—ñ–∫—Ç–µ–º–µ:</strong> {countryRiddles[currentRiddle].explanation}
                  </p>
                </div>
              )}
            </Card>
          )}

          {isComplete && (
            <Card className="p-8 text-center bg-success/10 border-success">
              <Trophy className="w-16 h-16 text-success mx-auto mb-4" />
              <h2 className="text-3xl font-bold mb-4">–¢–∞–º–∞—à–∞! üéâ</h2>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div className="bg-background p-4 rounded-lg">
                  <div className="text-2xl font-bold text-success">{score}/{countryRiddles.length}</div>
                  <div className="text-sm text-muted-foreground">–î“±—Ä—ã—Å –∂–∞—É–∞–ø</div>
                </div>
                <div className="bg-background p-4 rounded-lg">
                  <div className="text-2xl font-bold text-primary">{formatTime(time)}</div>
                  <div className="text-sm text-muted-foreground">–£–∞“õ—ã—Ç</div>
                </div>
                <div className="bg-background p-4 rounded-lg">
                  <div className="text-2xl font-bold text-orange-500">{attempts}</div>
                  <div className="text-sm text-muted-foreground">–ñ–∞–ª–ø—ã ”ô—Ä–µ–∫–µ—Ç</div>
                </div>
                <div className="bg-background p-4 rounded-lg">
                  <div className="text-2xl font-bold text-blue-500">{getAccuracy()}%</div>
                  <div className="text-sm text-muted-foreground">–î”ô–ª–¥—ñ–∫</div>
                </div>
              </div>
              <Button onClick={resetGame} size="lg" className="gap-2">
                <RotateCcw className="w-5 h-5" />
                “ö–∞–π—Ç–∞ –æ–π–Ω–∞—É
              </Button>
            </Card>
          )}

          <Card className="p-6 bg-muted/30">
            <h3 className="font-bold text-lg mb-3">üìñ –û–π—ã–Ω –µ—Ä–µ–∂–µ–ª–µ—Ä—ñ:</h3>
            <ul className="space-y-2 text-muted-foreground">
              <li>‚Ä¢ –ö”©–º–µ–∫—Ç–µ—Ä –±–æ–π—ã–Ω—à–∞ –µ–ª–¥—ñ —Ç–∞–±—ã“£—ã–∑</li>
              <li>‚Ä¢ –ö”©–º–µ–∫ –∫–µ—Ä–µ–∫ –±–æ–ª—Å–∞, "–ö–µ–ª–µ—Å—ñ –∫”©–º–µ–∫" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑</li>
              <li>‚Ä¢ –î“±—Ä—ã—Å –∂–∞—É–∞–ø “Ø—à—ñ–Ω “±–ø–∞–π –∞–ª–∞—Å—ã–∑</li>
              <li>‚Ä¢ –ê“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω–¥–µ –∂–∞—É–∞–ø –±–µ—Ä—ñ“£—ñ–∑</li>
              <li>‚Ä¢ ”ò—Ä –∂–∞—É–∞–ø—Ç–∞–Ω –∫–µ–π—ñ–Ω —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç–µ–º–µ –æ“õ—ã“£—ã–∑</li>
            </ul>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default GuessTheCountry;

