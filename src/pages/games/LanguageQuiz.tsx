import { useState, useEffect } from "react";
import Navigation from "@/components/Navigation";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, RotateCcw, Trophy, Timer, Globe, CheckCircle, XCircle } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

interface LanguageQuestion {
  id: number;
  country: string;
  flag: string;
  correctLanguage: string;
  options: string[];
  explanation: string;
}

const languageQuestions: LanguageQuestion[] = [
  {
    id: 1,
    country: "Kazakhstan",
    flag: "üá∞üáø",
    correctLanguage: "Kazakh",
    options: ["Kazakh", "Russian", "English", "Chinese"],
    explanation: "“ö–∞–∑–∞“õ—Å—Ç–∞–Ω–¥–∞ –Ω–µ–≥—ñ–∑–≥—ñ —Ç—ñ–ª “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ"
  },
  {
    id: 2,
    country: "Japan",
    flag: "üáØüáµ",
    correctLanguage: "Japanese",
    options: ["Japanese", "Chinese", "Korean", "English"],
    explanation: "–ñ–∞–ø–æ–Ω–∏—è–¥–∞ –Ω–µ–≥—ñ–∑–≥—ñ —Ç—ñ–ª –∂–∞–ø–æ–Ω —Ç—ñ–ª—ñ"
  },
  {
    id: 3,
    country: "Brazil",
    flag: "üáßüá∑",
    correctLanguage: "Portuguese",
    options: ["Portuguese", "Spanish", "English", "French"],
    explanation: "–ë—Ä–∞–∑–∏–ª–∏—è–¥–∞ –Ω–µ–≥—ñ–∑–≥—ñ —Ç—ñ–ª –ø–æ—Ä—Ç—É–≥–∞–ª —Ç—ñ–ª—ñ"
  },
  {
    id: 4,
    country: "Germany",
    flag: "üá©üá™",
    correctLanguage: "German",
    options: ["German", "French", "English", "Dutch"],
    explanation: "–ì–µ—Ä–º–∞–Ω–∏—è–¥–∞ –Ω–µ–≥—ñ–∑–≥—ñ —Ç—ñ–ª –Ω–µ–º—ñ—Å —Ç—ñ–ª—ñ"
  },
  {
    id: 5,
    country: "Egypt",
    flag: "üá™üá¨",
    correctLanguage: "Arabic",
    options: ["Arabic", "English", "French", "German"],
    explanation: "–ú—ã—Å—ã—Ä–¥–∞ –Ω–µ–≥—ñ–∑–≥—ñ —Ç—ñ–ª –∞—Ä–∞–± —Ç—ñ–ª—ñ"
  },
  {
    id: 6,
    country: "India",
    flag: "üáÆüá≥",
    correctLanguage: "Hindi",
    options: ["Hindi", "English", "Bengali", "Tamil"],
    explanation: "“Æ–Ω–¥—ñ—Å—Ç–∞–Ω–¥–∞ –µ“£ –∫”©–ø —Å”©–π–ª–µ–π—Ç—ñ–Ω —Ç—ñ–ª —Ö–∏–Ω–¥–∏"
  },
  {
    id: 7,
    country: "South Korea",
    flag: "üá∞üá∑",
    correctLanguage: "Korean",
    options: ["Korean", "Chinese", "Japanese", "English"],
    explanation: "–û“£—Ç“Ø—Å—Ç—ñ–∫ –ö–æ—Ä–µ—è–¥–∞ –Ω–µ–≥—ñ–∑–≥—ñ —Ç—ñ–ª –∫–æ—Ä–µ–π —Ç—ñ–ª—ñ"
  },
  {
    id: 8,
    country: "Turkey",
    flag: "üáπüá∑",
    correctLanguage: "Turkish",
    options: ["Turkish", "Arabic", "Greek", "English"],
    explanation: "–¢“Ø—Ä–∫–∏—è–¥–∞ –Ω–µ–≥—ñ–∑–≥—ñ —Ç—ñ–ª —Ç“Ø—Ä—ñ–∫ —Ç—ñ–ª—ñ"
  },
  {
    id: 9,
    country: "Russia",
    flag: "üá∑üá∫",
    correctLanguage: "Russian",
    options: ["Russian", "Ukrainian", "Belarusian", "Kazakh"],
    explanation: "–†–µ—Å–µ–π–¥–µ –Ω–µ–≥—ñ–∑–≥—ñ —Ç—ñ–ª –æ—Ä—ã—Å —Ç—ñ–ª—ñ"
  },
  {
    id: 10,
    country: "Thailand",
    flag: "üáπüá≠",
    correctLanguage: "Thai",
    options: ["Thai", "English", "Chinese", "Vietnamese"],
    explanation: "–¢–∞–π–ª–∞–Ω–¥—Ç–∞ –Ω–µ–≥—ñ–∑–≥—ñ —Ç—ñ–ª —Ç–∞–π —Ç—ñ–ª—ñ"
  }
];

const LanguageQuiz = () => {
  const navigate = useNavigate();
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [time, setTime] = useState(0);
  const [isGameActive, setIsGameActive] = useState(false);
  const [isComplete, setIsComplete] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState<string | null>(null);
  const [showExplanation, setShowExplanation] = useState(false);
  const [streak, setStreak] = useState(0);
  const [maxStreak, setMaxStreak] = useState(0);

  useEffect(() => {
    if (isGameActive && !isComplete) {
      const interval = setInterval(() => {
        setTime((prev) => prev + 1);
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [isGameActive, isComplete]);

  const startGame = () => {
    setCurrentQuestion(0);
    setScore(0);
    setTime(0);
    setIsGameActive(true);
    setIsComplete(false);
    setSelectedAnswer(null);
    setShowExplanation(false);
    setStreak(0);
    setMaxStreak(0);
    toast.success("–û–π—ã–Ω –±–∞—Å—Ç–∞–ª–¥—ã! üéÆ");
  };

  const handleAnswer = (answer: string) => {
    if (selectedAnswer !== null) return;
    
    setSelectedAnswer(answer);
    const question = languageQuestions[currentQuestion];
    const isCorrect = answer === question.correctLanguage;
    
    if (isCorrect) {
      setScore(prev => prev + 1);
      setStreak(prev => {
        const newStreak = prev + 1;
        setMaxStreak(prevMax => Math.max(prevMax, newStreak));
        return newStreak;
      });
      toast.success("–î“±—Ä—ã—Å! üéâ");
    } else {
      setStreak(0);
      toast.error("“ö–∞—Ç–µ! üòî");
    }
    
    setShowExplanation(true);
    
    setTimeout(() => {
      if (currentQuestion < languageQuestions.length - 1) {
        setCurrentQuestion(prev => prev + 1);
        setSelectedAnswer(null);
        setShowExplanation(false);
      } else {
        setIsComplete(true);
        setIsGameActive(false);
        toast.success(`–û–π—ã–Ω –∞—è“õ—Ç–∞–ª–¥—ã! “∞–ø–∞–π: ${score + (isCorrect ? 1 : 0)}/${languageQuestions.length}`);
      }
    }, 3000);
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, "0")}`;
  };

  const resetGame = () => {
    startGame();
  };

  const getAccuracy = () => {
    return Math.round((score / (currentQuestion + 1)) * 100);
  };

  const getButtonStyle = (option: string) => {
    if (selectedAnswer === null) return "";
    
    const question = languageQuestions[currentQuestion];
    const isCorrect = option === question.correctLanguage;
    const isSelected = option === selectedAnswer;
    
    if (isCorrect) return "bg-success text-success-foreground";
    if (isSelected && !isCorrect) return "bg-destructive text-destructive-foreground";
    return "";
  };

  return (
    <div className="min-h-screen bg-background">
      <Navigation />

      <div className="container mx-auto px-4 py-12">
        <div className="max-w-4xl mx-auto">
          <Button
            variant="ghost"
            onClick={() => navigate("/games")}
            className="mb-6"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            –ê—Ä—Ç“õ–∞
          </Button>

          <Card className="p-8 mb-6 bg-gradient-card">
            <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4 mb-6">
              <div>
                <Badge className="mb-4" variant="secondary">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞</Badge>
                <h1 className="text-3xl font-bold mb-2">
                  Language Quiz - “ö–∞–π –µ–ª–¥–µ “õ–∞–π —Ç—ñ–ª–¥–µ —Å”©–π–ª–µ–π–¥—ñ?
                </h1>
                <p className="text-muted-foreground">
                  –ï–ª–¥–µ—Ä–¥—ñ –æ–ª–∞—Ä–¥—ã“£ –Ω–µ–≥—ñ–∑–≥—ñ —Ç—ñ–ª–¥–µ—Ä—ñ–º–µ–Ω —Å”ô–π–∫–µ—Å—Ç–µ–Ω–¥—ñ—Ä—ñ“£—ñ–∑
                </p>
              </div>
              <Button onClick={resetGame} variant="outline" className="gap-2">
                <RotateCcw className="w-4 h-4" />
                “ö–∞–π—Ç–∞ –±–∞—Å—Ç–∞—É
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <Trophy className="w-4 h-4 text-success" />
                <span>“∞–ø–∞–π: {score}/{languageQuestions.length}</span>
              </Badge>
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <Timer className="w-4 h-4 text-primary" />
                <span>–£–∞“õ—ã—Ç: {formatTime(time)}</span>
              </Badge>
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <span>–°“±—Ä–∞“õ: {currentQuestion + 1}/{languageQuestions.length}</span>
              </Badge>
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <span>–î”ô–ª–¥—ñ–∫: {getAccuracy()}%</span>
              </Badge>
            </div>
          </Card>

          {!isGameActive && !isComplete && (
            <Card className="p-8 text-center mb-6">
              <h2 className="text-2xl font-bold mb-4">–¢—ñ–ª–¥–µ—Ä —Ç—É—Ä–∞–ª—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞</h2>
              <p className="text-muted-foreground mb-6">
                –ï–ª–¥–µ—Ä–¥—ñ –æ–ª–∞—Ä–¥—ã“£ –Ω–µ–≥—ñ–∑–≥—ñ —Ç—ñ–ª–¥–µ—Ä—ñ–º–µ–Ω —Å”ô–π–∫–µ—Å—Ç–µ–Ω–¥—ñ—Ä—ñ“£—ñ–∑
              </p>
              <Button onClick={startGame} size="lg" className="gap-2">
                <Globe className="w-5 h-5" />
                –û–π—ã–Ω–¥—ã –±–∞—Å—Ç–∞—É
              </Button>
            </Card>
          )}

          {isGameActive && !isComplete && (
            <Card className="p-8 mb-6">
              <div className="text-center mb-8">
                <div className="flex justify-between items-center mb-4">
                  <span className="text-sm text-muted-foreground">
                    –°“±—Ä–∞“õ {currentQuestion + 1}/{languageQuestions.length}
                  </span>
                  <div className="flex gap-2">
                    <Badge variant="outline" className="gap-1">
                      <span>–°–µ—Ä–∏—è: {streak}</span>
                    </Badge>
                  </div>
                </div>
                
                <div className="flex items-center justify-center gap-4 mb-6">
                  <div className="text-4xl">
                    {languageQuestions[currentQuestion].flag}
                  </div>
                  <h2 className="text-3xl font-bold">
                    {languageQuestions[currentQuestion].country}
                  </h2>
                </div>
                
                <p className="text-muted-foreground mb-8 text-lg">
                  –ë“±–ª –µ–ª–¥–µ –Ω–µ–≥—ñ–∑–≥—ñ —Ç—ñ–ª “õ–∞–Ω–¥–∞–π?
                </p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-8">
                {languageQuestions[currentQuestion].options.map((option, index) => (
                  <Button
                    key={index}
                    onClick={() => handleAnswer(option)}
                    disabled={selectedAnswer !== null}
                    className={`gap-2 text-lg py-6 ${getButtonStyle(option)}`}
                    variant={selectedAnswer === null ? "outline" : "default"}
                  >
                    {option}
                  </Button>
                ))}
              </div>

              {showExplanation && (
                <div className="bg-blue-50 dark:bg-blue-950 p-6 rounded-lg">
                  <h3 className="font-bold text-lg mb-2">–¢“Ø—Å—ñ–Ω—ñ–∫—Ç–µ–º–µ:</h3>
                  <p className="text-blue-800 dark:text-blue-200">
                    {languageQuestions[currentQuestion].explanation}
                  </p>
                </div>
              )}
            </Card>
          )}

          {isComplete && (
            <Card className="p-8 text-center bg-success/10 border-success">
              <Trophy className="w-16 h-16 text-success mx-auto mb-4" />
              <h2 className="text-3xl font-bold mb-4">–¢–∞–º–∞—à–∞! üéâ</h2>
              <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                <div className="bg-background p-4 rounded-lg">
                  <div className="text-2xl font-bold text-success">{score}/{languageQuestions.length}</div>
                  <div className="text-sm text-muted-foreground">–î“±—Ä—ã—Å –∂–∞—É–∞–ø</div>
                </div>
                <div className="bg-background p-4 rounded-lg">
                  <div className="text-2xl font-bold text-primary">{formatTime(time)}</div>
                  <div className="text-sm text-muted-foreground">–£–∞“õ—ã—Ç</div>
                </div>
                <div className="bg-background p-4 rounded-lg">
                  <div className="text-2xl font-bold text-orange-500">{maxStreak}</div>
                  <div className="text-sm text-muted-foreground">“Æ–∑–¥—ñ–∫ —Å–µ—Ä–∏—è</div>
                </div>
                <div className="bg-background p-4 rounded-lg">
                  <div className="text-2xl font-bold text-blue-500">{getAccuracy()}%</div>
                  <div className="text-sm text-muted-foreground">–î”ô–ª–¥—ñ–∫</div>
                </div>
              </div>
              <Button onClick={resetGame} size="lg" className="gap-2">
                <RotateCcw className="w-5 h-5" />
                “ö–∞–π—Ç–∞ –æ–π–Ω–∞—É
              </Button>
            </Card>
          )}

          <Card className="p-6 bg-muted/30">
            <h3 className="font-bold text-lg mb-3">üìñ –û–π—ã–Ω –µ—Ä–µ–∂–µ–ª–µ—Ä—ñ:</h3>
            <ul className="space-y-2 text-muted-foreground">
              <li>‚Ä¢ ”ò—Ä –µ–ª–¥—ñ –æ–Ω—ã“£ –Ω–µ–≥—ñ–∑–≥—ñ —Ç—ñ–ª—ñ–º–µ–Ω —Å”ô–π–∫–µ—Å—Ç–µ–Ω–¥—ñ—Ä—ñ“£—ñ–∑</li>
              <li>‚Ä¢ –î“±—Ä—ã—Å –∂–∞—É–∞–ø “Ø—à—ñ–Ω “±–ø–∞–π –∞–ª–∞—Å—ã–∑</li>
              <li>‚Ä¢ “Æ–∑–¥—ñ–∫ —Å–µ—Ä–∏—è –∂–∞—Å–∞—É“ì–∞ —Ç—ã—Ä—ã—Å—ã“£—ã–∑</li>
              <li>‚Ä¢ –ñ—ã–ª–¥–∞–º –∂”ô–Ω–µ –¥“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä—É–≥–µ —Ç—ã—Ä—ã—Å—ã“£—ã–∑</li>
              <li>‚Ä¢ ”ò—Ä —Å“±—Ä–∞“õ—Ç–∞–Ω –∫–µ–π—ñ–Ω —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç–µ–º–µ –æ“õ—ã“£—ã–∑</li>
            </ul>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default LanguageQuiz;

