import { useState, useEffect } from "react";
import Navigation from "@/components/Navigation";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { ArrowLeft, RotateCcw, Trophy, Timer, Building, CheckCircle, Star, MapPin } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

interface CityTemplate {
  id: number;
  name: string;
  country: string;
  flag: string;
  description: string;
  keyWords: string[];
  difficulty: 'Easy' | 'Medium' | 'Hard';
}

const cityTemplates: CityTemplate[] = [
  {
    id: 1,
    name: "Almaty",
    country: "Kazakhstan",
    flag: "üá∞üáø",
    description: "Almaty is a beautiful city in Kazakhstan. It is located at the foot of the mountains. The city has many parks and gardens. People love to visit the Big Almaty Lake. The weather is usually pleasant. There are many universities and schools. The city is famous for its apples.",
    keyWords: ["beautiful", "mountains", "parks", "gardens", "lake", "weather", "universities", "apples"],
    difficulty: "Easy"
  },
  {
    id: 2,
    name: "London",
    country: "United Kingdom",
    flag: "üá¨üáß",
    description: "London is the capital of the United Kingdom. It is a very old city with a rich history. The city has many famous landmarks like Big Ben and the Tower of London. The River Thames flows through the city. There are many museums and theaters. The weather is often rainy. London is a multicultural city with people from all over the world.",
    keyWords: ["capital", "history", "landmarks", "Big Ben", "Tower", "Thames", "museums", "theaters", "rainy", "multicultural"],
    difficulty: "Medium"
  },
  {
    id: 3,
    name: "Tokyo",
    country: "Japan",
    flag: "üáØüáµ",
    description: "Tokyo is the capital of Japan and one of the largest cities in the world. It is a modern city with advanced technology. The city has many skyscrapers and neon lights. Tokyo is famous for its efficient public transportation. There are many temples and gardens. The city is very crowded but organized. Tokyo is known for its delicious food and unique culture.",
    keyWords: ["capital", "largest", "modern", "technology", "skyscrapers", "neon", "transportation", "temples", "crowded", "organized", "food", "culture"],
    difficulty: "Hard"
  },
  {
    id: 4,
    name: "Paris",
    country: "France",
    flag: "üá´üá∑",
    description: "Paris is the capital of France and is known as the City of Light. It is famous for the Eiffel Tower and the Louvre Museum. The city has beautiful architecture and wide boulevards. Paris is located on the Seine River. The city is famous for its fashion and cuisine. There are many cafes and restaurants. Paris is a romantic city that attracts millions of tourists every year.",
    keyWords: ["capital", "City of Light", "Eiffel Tower", "Louvre", "architecture", "boulevards", "Seine", "fashion", "cuisine", "cafes", "romantic", "tourists"],
    difficulty: "Medium"
  },
  {
    id: 5,
    name: "New York",
    country: "United States",
    flag: "üá∫üá∏",
    description: "New York is the largest city in the United States. It is often called the Big Apple. The city has many famous landmarks like the Statue of Liberty and Central Park. New York is a financial center with many banks and businesses. The city has a diverse population. There are many theaters on Broadway. New York is known for its fast pace and energy.",
    keyWords: ["largest", "Big Apple", "Statue of Liberty", "Central Park", "financial", "banks", "businesses", "diverse", "Broadway", "theaters", "fast pace", "energy"],
    difficulty: "Hard"
  }
];

const CityDescriptionBuilder = () => {
  const navigate = useNavigate();
  const [currentCity, setCurrentCity] = useState(0);
  const [userDescription, setUserDescription] = useState("");
  const [score, setScore] = useState(0);
  const [time, setTime] = useState(0);
  const [isGameActive, setIsGameActive] = useState(false);
  const [isComplete, setIsComplete] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [attempts, setAttempts] = useState(0);

  useEffect(() => {
    if (isGameActive && !isComplete) {
      const interval = setInterval(() => {
        setTime((prev) => prev + 1);
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [isGameActive, isComplete]);

  const startGame = () => {
    setCurrentCity(0);
    setUserDescription("");
    setScore(0);
    setTime(0);
    setIsGameActive(true);
    setIsComplete(false);
    setShowResults(false);
    setAttempts(0);
    toast.success("–û–π—ã–Ω –±–∞—Å—Ç–∞–ª–¥—ã! üéÆ");
  };

  const checkDescription = () => {
    if (!userDescription.trim()) {
      toast.error("–°–∏–ø–∞—Ç—Ç–∞–º–∞–Ω—ã –∂–∞–∑—ã“£—ã–∑!");
      return;
    }

    setAttempts(prev => prev + 1);
    const city = cityTemplates[currentCity];
    const userText = userDescription.toLowerCase();
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const foundWords = city.keyWords.filter(word => 
      userText.includes(word.toLowerCase())
    );
    
    const accuracy = Math.round((foundWords.length / city.keyWords.length) * 100);
    const points = Math.round(accuracy / 10); // 0-10 –±–∞–ª–ª–æ–≤
    
    setScore(prev => prev + points);
    
    if (accuracy >= 70) {
      toast.success(`–ñ–∞“õ—Å—ã! ${accuracy}% –¥”ô–ª–¥—ñ–∫! üéâ`);
    } else if (accuracy >= 50) {
      toast.info(`–ñ–∞“õ—Å—ã! ${accuracy}% –¥”ô–ª–¥—ñ–∫! üëç`);
    } else {
      toast.error(`–¢–∞“ì—ã –¥–∞–º—ã—Ç—É –∫–µ—Ä–µ–∫! ${accuracy}% –¥”ô–ª–¥—ñ–∫! üòî`);
    }
    
    setShowResults(true);
    
    setTimeout(() => {
      if (currentCity < cityTemplates.length - 1) {
        setCurrentCity(prev => prev + 1);
        setUserDescription("");
        setShowResults(false);
      } else {
        setIsComplete(true);
        setIsGameActive(false);
        toast.success(`–û–π—ã–Ω –∞—è“õ—Ç–∞–ª–¥—ã! –ñ–∞–ª–ø—ã “±–ø–∞–π: ${score + points}`);
      }
    }, 5000);
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, "0")}`;
  };

  const resetGame = () => {
    startGame();
  };

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Easy': return 'text-green-600';
      case 'Medium': return 'text-yellow-600';
      case 'Hard': return 'text-red-600';
      default: return 'text-gray-600';
    }
  };

  const getDifficultyBg = (difficulty: string) => {
    switch (difficulty) {
      case 'Easy': return 'bg-green-50 border-green-200';
      case 'Medium': return 'bg-yellow-50 border-yellow-200';
      case 'Hard': return 'bg-red-50 border-red-200';
      default: return 'bg-gray-50 border-gray-200';
    }
  };

  return (
    <div className="min-h-screen bg-background">
      <Navigation />

      <div className="container mx-auto px-4 py-12">
        <div className="max-w-4xl mx-auto">
          <Button
            variant="ghost"
            onClick={() => navigate("/games")}
            className="mb-6"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            –ê—Ä—Ç“õ–∞
          </Button>

          <Card className="p-8 mb-6 bg-gradient-card">
            <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4 mb-6">
              <div>
                <Badge className="mb-4" variant="secondary">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ –æ–π—ã–Ω</Badge>
                <h1 className="text-3xl font-bold mb-2">
                  City Description Builder - “ö–∞–ª–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã–Ω –∂–∞–∑—É
                </h1>
                <p className="text-muted-foreground">
                  “ö–∞–ª–∞–ª–∞—Ä —Ç—É—Ä–∞–ª—ã –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω–¥–µ —Å–∏–ø–∞—Ç—Ç–∞–º–∞ –∂–∞–∑—ã“£—ã–∑
                </p>
              </div>
              <Button onClick={resetGame} variant="outline" className="gap-2">
                <RotateCcw className="w-4 h-4" />
                “ö–∞–π—Ç–∞ –±–∞—Å—Ç–∞—É
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <Trophy className="w-4 h-4 text-success" />
                <span>“∞–ø–∞–π: {score}</span>
              </Badge>
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <Timer className="w-4 h-4 text-primary" />
                <span>–£–∞“õ—ã—Ç: {formatTime(time)}</span>
              </Badge>
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <span>“ö–∞–ª–∞: {currentCity + 1}/{cityTemplates.length}</span>
              </Badge>
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <span>”ò—Ä–µ–∫–µ—Ç: {attempts}</span>
              </Badge>
            </div>
          </Card>

          {!isGameActive && !isComplete && (
            <Card className="p-8 text-center mb-6">
              <h2 className="text-2xl font-bold mb-4">“ö–∞–ª–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã–Ω –∂–∞–∑—É –æ–π—ã–Ω—ã</h2>
              <p className="text-muted-foreground mb-6">
                “ö–∞–ª–∞–ª–∞—Ä —Ç—É—Ä–∞–ª—ã –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω–¥–µ —Å–∏–ø–∞—Ç—Ç–∞–º–∞ –∂–∞–∑—ã“£—ã–∑
              </p>
              <Button onClick={startGame} size="lg" className="gap-2">
                <Building className="w-5 h-5" />
                –û–π—ã–Ω–¥—ã –±–∞—Å—Ç–∞—É
              </Button>
            </Card>
          )}

          {isGameActive && !isComplete && (
            <Card className="p-8 mb-6">
              <div className="text-center mb-8">
                <div className="flex justify-between items-center mb-4">
                  <span className="text-sm text-muted-foreground">
                    “ö–∞–ª–∞ {currentCity + 1}/{cityTemplates.length}
                  </span>
                  <Badge 
                    variant="outline" 
                    className={`gap-1 ${getDifficultyBg(cityTemplates[currentCity].difficulty)}`}
                  >
                    <span className={getDifficultyColor(cityTemplates[currentCity].difficulty)}>
                      {cityTemplates[currentCity].difficulty}
                    </span>
                  </Badge>
                </div>
                
                <div className="flex items-center justify-center gap-4 mb-6">
                  <div className="text-4xl">
                    {cityTemplates[currentCity].flag}
                  </div>
                  <div>
                    <h2 className="text-3xl font-bold">
                      {cityTemplates[currentCity].name}
                    </h2>
                    <p className="text-muted-foreground">
                      {cityTemplates[currentCity].country}
                    </p>
                  </div>
                </div>
                
                <p className="text-muted-foreground mb-8 text-lg">
                  –ë“±–ª “õ–∞–ª–∞ —Ç—É—Ä–∞–ª—ã –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω–¥–µ —Å–∏–ø–∞—Ç—Ç–∞–º–∞ –∂–∞–∑—ã“£—ã–∑
                </p>
              </div>

              <div className="space-y-6">
                <div>
                  <label className="block text-sm font-medium mb-2">
                    “ö–∞–ª–∞ —Å–∏–ø–∞—Ç—Ç–∞–º–∞—Å—ã:
                  </label>
                  <Textarea
                    value={userDescription}
                    onChange={(e) => setUserDescription(e.target.value)}
                    placeholder="“ö–∞–ª–∞ —Ç—É—Ä–∞–ª—ã —Å–∏–ø–∞—Ç—Ç–∞–º–∞–Ω—ã –æ—Å—ã –∂–µ—Ä–≥–µ –∂–∞–∑—ã“£—ã–∑..."
                    rows={6}
                    className="text-lg"
                  />
                </div>
                
                <div className="flex gap-4 justify-center">
                  <Button onClick={checkDescription} className="gap-2">
                    <CheckCircle className="w-4 h-4" />
                    –¢–µ–∫—Å–µ—Ä—É
                  </Button>
                </div>
              </div>

              {showResults && (
                <div className="bg-blue-50 dark:bg-blue-950 p-6 rounded-lg mt-6">
                  <h3 className="font-bold text-lg mb-4">–î“±—Ä—ã—Å –∂–∞—É–∞–ø:</h3>
                  <p className="text-blue-800 dark:text-blue-200 mb-4">
                    {cityTemplates[currentCity].description}
                  </p>
                  
                  <div className="mb-4">
                    <h4 className="font-semibold mb-2">–ö—ñ–ª—Ç —Å”©–∑–¥–µ—Ä:</h4>
                    <div className="flex flex-wrap gap-2">
                      {cityTemplates[currentCity].keyWords.map((word, index) => (
                        <Badge key={index} variant="outline" className="gap-1">
                          <Star className="w-3 h-3" />
                          {word}
                        </Badge>
                      ))}
                    </div>
                  </div>
                  
                  <p className="text-sm text-blue-700 dark:text-blue-300">
                    –ö—ñ–ª—Ç —Å”©–∑–¥–µ—Ä–¥—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É“ì–∞ —Ç—ã—Ä—ã—Å—ã“£—ã–∑!
                  </p>
                </div>
              )}
            </Card>
          )}

          {isComplete && (
            <Card className="p-8 text-center bg-success/10 border-success">
              <Trophy className="w-16 h-16 text-success mx-auto mb-4" />
              <h2 className="text-3xl font-bold mb-4">–¢–∞–º–∞—à–∞! üéâ</h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div className="bg-background p-4 rounded-lg">
                  <div className="text-2xl font-bold text-success">{score}</div>
                  <div className="text-sm text-muted-foreground">–ñ–∞–ª–ø—ã “±–ø–∞–π</div>
                </div>
                <div className="bg-background p-4 rounded-lg">
                  <div className="text-2xl font-bold text-primary">{formatTime(time)}</div>
                  <div className="text-sm text-muted-foreground">–£–∞“õ—ã—Ç</div>
                </div>
                <div className="bg-background p-4 rounded-lg">
                  <div className="text-2xl font-bold text-orange-500">{attempts}</div>
                  <div className="text-sm text-muted-foreground">–ñ–∞–ª–ø—ã ”ô—Ä–µ–∫–µ—Ç</div>
                </div>
              </div>
              <Button onClick={resetGame} size="lg" className="gap-2">
                <RotateCcw className="w-5 h-5" />
                “ö–∞–π—Ç–∞ –æ–π–Ω–∞—É
              </Button>
            </Card>
          )}

          <Card className="p-6 bg-muted/30">
            <h3 className="font-bold text-lg mb-3">üìñ –û–π—ã–Ω –µ—Ä–µ–∂–µ–ª–µ—Ä—ñ:</h3>
            <ul className="space-y-2 text-muted-foreground">
              <li>‚Ä¢ ”ò—Ä “õ–∞–ª–∞ —Ç—É—Ä–∞–ª—ã –∞“ì—ã–ª—à—ã–Ω —Ç—ñ–ª—ñ–Ω–¥–µ —Å–∏–ø–∞—Ç—Ç–∞–º–∞ –∂–∞–∑—ã“£—ã–∑</li>
              <li>‚Ä¢ –ö—ñ–ª—Ç —Å”©–∑–¥–µ—Ä–¥—ñ –ø–∞–π–¥–∞–ª–∞–Ω—É“ì–∞ —Ç—ã—Ä—ã—Å—ã“£—ã–∑</li>
              <li>‚Ä¢ –î“±—Ä—ã—Å –∂–∞—É–∞–ø “Ø—à—ñ–Ω “±–ø–∞–π –∞–ª–∞—Å—ã–∑</li>
              <li>‚Ä¢ –ö—ñ–ª—Ç —Å”©–∑–¥–µ—Ä–¥—ñ –∫”©–ø –ø–∞–π–¥–∞–ª–∞–Ω—Å–∞“£—ã–∑, –∫”©–ø “±–ø–∞–π –∞–ª–∞—Å—ã–∑</li>
              <li>‚Ä¢ ”ò—Ä –∂–∞—É–∞–ø—Ç–∞–Ω –∫–µ–π—ñ–Ω –¥“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç—ã –∫”©—Ä–µ –∞–ª–∞—Å—ã–∑</li>
            </ul>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default CityDescriptionBuilder;







