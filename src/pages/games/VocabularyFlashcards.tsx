import { useState, useEffect } from "react";
import Navigation from "@/components/Navigation";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ArrowLeft, RotateCcw, Trophy, Timer, BookOpen, CheckCircle, XCircle, Eye, EyeOff } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";

interface VocabularyCard {
  id: number;
  english: string;
  kazakh: string;
  pronunciation: string;
  example: string;
  category: string;
}

const vocabularyCards: VocabularyCard[] = [
  {
    id: 1,
    english: "Beautiful",
    kazakh: "”ò–¥–µ–º—ñ",
    pronunciation: "/ÀàbjuÀêt…™f…ôl/",
    example: "She is beautiful - –û–ª ”ô–¥–µ–º—ñ",
    category: "Adjectives"
  },
  {
    id: 2,
    english: "Happy",
    kazakh: "–ë–∞“õ—ã—Ç—Ç—ã",
    pronunciation: "/Ààh√¶pi/",
    example: "I am happy - –ú–µ–Ω –±–∞“õ—ã—Ç—Ç—ã–º—ã–Ω",
    category: "Adjectives"
  },
  {
    id: 3,
    english: "School",
    kazakh: "–ú–µ–∫—Ç–µ–ø",
    pronunciation: "/skuÀêl/",
    example: "I go to school - –ú–µ–Ω –º–µ–∫—Ç–µ–ø–∫–µ –±–∞—Ä–∞–º—ã–Ω",
    category: "Nouns"
  },
  {
    id: 4,
    english: "Friend",
    kazakh: "–î–æ—Å",
    pronunciation: "/frend/",
    example: "My friend is kind - –ú–µ–Ω—ñ“£ –¥–æ—Å—ã–º –º–µ–π—ñ—Ä—ñ–º–¥—ñ",
    category: "Nouns"
  },
  {
    id: 5,
    english: "Run",
    kazakh: "–ñ“Ø–≥—ñ—Ä—É",
    pronunciation: "/r ån/",
    example: "I run every morning - –ú–µ–Ω ”ô—Ä —Ç–∞“£–µ—Ä—Ç–µ“£ –∂“Ø–≥—ñ—Ä–µ–º—ñ–Ω",
    category: "Verbs"
  },
  {
    id: 6,
    english: "Eat",
    kazakh: "–ñ–µ—É",
    pronunciation: "/iÀêt/",
    example: "We eat dinner together - –ë—ñ–∑ –∫–µ—à–∫—ñ –∞—Å—Ç—ã –±—ñ—Ä–≥–µ –∂–µ–π–º—ñ–∑",
    category: "Verbs"
  },
  {
    id: 7,
    english: "Big",
    kazakh: "“Æ–ª–∫–µ–Ω",
    pronunciation: "/b…™…°/",
    example: "This house is big - –ë“±–ª “Ø–π “Ø–ª–∫–µ–Ω",
    category: "Adjectives"
  },
  {
    id: 8,
    english: "Book",
    kazakh: "–ö—ñ—Ç–∞–ø",
    pronunciation: "/b äk/",
    example: "I read a book - –ú–µ–Ω –∫—ñ—Ç–∞–ø –æ“õ–∏–º—ã–Ω",
    category: "Nouns"
  },
  {
    id: 9,
    english: "Sleep",
    kazakh: "“∞–π—ã“õ—Ç–∞—É",
    pronunciation: "/sliÀêp/",
    example: "I sleep at night - –ú–µ–Ω —Ç“Ø–Ω–¥–µ “±–π—ã“õ—Ç–∞–π–º—ã–Ω",
    category: "Verbs"
  },
  {
    id: 10,
    english: "Small",
    kazakh: "–ö—ñ—à–∫–µ–Ω—Ç–∞–π",
    pronunciation: "/sm…îÀêl/",
    example: "The cat is small - –ú—ã—Å—ã“õ –∫—ñ—à–∫–µ–Ω—Ç–∞–π",
    category: "Adjectives"
  },
  {
    id: 11,
    english: "Water",
    kazakh: "–°—É",
    pronunciation: "/Ààw…îÀêt…ôr/",
    example: "I drink water - –ú–µ–Ω —Å—É —ñ—à–µ–º—ñ–Ω",
    category: "Nouns"
  },
  {
    id: 12,
    english: "Play",
    kazakh: "–û–π–Ω–∞—É",
    pronunciation: "/ple…™/",
    example: "Children play games - –ë–∞–ª–∞–ª–∞—Ä –æ–π—ã–Ω –æ–π–Ω–∞–π–¥—ã",
    category: "Verbs"
  }
];

const VocabularyFlashcards = () => {
  const navigate = useNavigate();
  const [currentCard, setCurrentCard] = useState(0);
  const [showTranslation, setShowTranslation] = useState(false);
  const [studiedCards, setStudiedCards] = useState<number[]>([]);
  const [time, setTime] = useState(0);
  const [isGameActive, setIsGameActive] = useState(false);
  const [isComplete, setIsComplete] = useState(false);
  const [studyMode, setStudyMode] = useState<'learning' | 'review'>('learning');

  useEffect(() => {
    if (isGameActive && !isComplete) {
      const interval = setInterval(() => {
        setTime((prev) => prev + 1);
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [isGameActive, isComplete]);

  const startGame = () => {
    setCurrentCard(0);
    setShowTranslation(false);
    setStudiedCards([]);
    setTime(0);
    setIsGameActive(true);
    setIsComplete(false);
    setStudyMode('learning');
    toast.success("–û–π—ã–Ω –±–∞—Å—Ç–∞–ª–¥—ã! üéÆ");
  };

  const toggleTranslation = () => {
    setShowTranslation(!showTranslation);
  };

  const markAsStudied = () => {
    if (!studiedCards.includes(currentCard)) {
      setStudiedCards(prev => [...prev, currentCard]);
      toast.success("–ñ–∞“õ—Å—ã! –°”©–∑–¥—ñ “Ø–π—Ä–µ–Ω–¥—ñ“£—ñ–∑! üéâ");
    }
    
    if (currentCard < vocabularyCards.length - 1) {
      setCurrentCard(prev => prev + 1);
      setShowTranslation(false);
    } else {
      setIsComplete(true);
      setIsGameActive(false);
      toast.success(`–û–π—ã–Ω –∞—è“õ—Ç–∞–ª–¥—ã! ${studiedCards.length + 1}/${vocabularyCards.length} —Å”©–∑–¥—ñ “Ø–π—Ä–µ–Ω–¥—ñ“£—ñ–∑!`);
    }
  };

  const skipCard = () => {
    if (currentCard < vocabularyCards.length - 1) {
      setCurrentCard(prev => prev + 1);
      setShowTranslation(false);
    } else {
      setIsComplete(true);
      setIsGameActive(false);
      toast.success(`–û–π—ã–Ω –∞—è“õ—Ç–∞–ª–¥—ã! ${studiedCards.length}/${vocabularyCards.length} —Å”©–∑–¥—ñ “Ø–π—Ä–µ–Ω–¥—ñ“£—ñ–∑!`);
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, "0")}`;
  };

  const resetGame = () => {
    startGame();
  };

  const getProgress = () => {
    return Math.round((studiedCards.length / vocabularyCards.length) * 100);
  };

  return (
    <div className="min-h-screen bg-background">
      <Navigation />

      <div className="container mx-auto px-4 py-12">
        <div className="max-w-4xl mx-auto">
          <Button
            variant="ghost"
            onClick={() => navigate("/games")}
            className="mb-6"
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            –ê—Ä—Ç“õ–∞
          </Button>

          <Card className="p-8 mb-6 bg-gradient-card">
            <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4 mb-6">
              <div>
                <Badge className="mb-4" variant="secondary">–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤—Ç—ñ –∫–∞—Ä—Ç–æ—á–∫–∞–ª–∞—Ä</Badge>
                <h1 className="text-3xl font-bold mb-2">
                  Vocabulary Flashcards - –ñ–∞“£–∞ —Å”©–∑–¥–µ—Ä–¥—ñ –µ—Å—Ç–µ —Å–∞“õ—Ç–∞—É
                </h1>
                <p className="text-muted-foreground">
                  –°”©–∑–¥—ñ–∫ “õ–æ—Ä—ã“£—ã–∑–¥—ã –∫–µ“£–µ–π—Ç—ñ“£—ñ–∑
                </p>
              </div>
              <Button onClick={resetGame} variant="outline" className="gap-2">
                <RotateCcw className="w-4 h-4" />
                “ö–∞–π—Ç–∞ –±–∞—Å—Ç–∞—É
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <Trophy className="w-4 h-4 text-success" />
                <span>“Æ–π—Ä–µ–Ω–¥—ñ: {studiedCards.length}/{vocabularyCards.length}</span>
              </Badge>
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <Timer className="w-4 h-4 text-primary" />
                <span>–£–∞“õ—ã—Ç: {formatTime(time)}</span>
              </Badge>
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <span>–ö–∞—Ä—Ç–æ—á–∫–∞: {currentCard + 1}/{vocabularyCards.length}</span>
              </Badge>
              <Badge variant="outline" className="p-3 justify-center gap-2">
                <span>–ü—Ä–æ–≥—Ä–µ—Å—Å: {getProgress()}%</span>
              </Badge>
            </div>
          </Card>

          {!isGameActive && !isComplete && (
            <Card className="p-8 text-center mb-6">
              <h2 className="text-2xl font-bold mb-4">–°”©–∑–¥—ñ–∫ –∫–∞—Ä—Ç–æ—á–∫–∞–ª–∞—Ä—ã</h2>
              <p className="text-muted-foreground mb-6">
                –ñ–∞“£–∞ —Å”©–∑–¥–µ—Ä–¥—ñ “Ø–π—Ä–µ–Ω—ñ“£—ñ–∑ –∂”ô–Ω–µ –µ—Å—Ç–µ —Å–∞“õ—Ç–∞“£—ã–∑
              </p>
              <Button onClick={startGame} size="lg" className="gap-2">
                <BookOpen className="w-5 h-5" />
                –û–π—ã–Ω–¥—ã –±–∞—Å—Ç–∞—É
              </Button>
            </Card>
          )}

          {isGameActive && !isComplete && (
            <Card className="p-8 mb-6">
              <div className="text-center mb-8">
                <div className="flex justify-between items-center mb-4">
                  <span className="text-sm text-muted-foreground">
                    –ö–∞—Ä—Ç–æ—á–∫–∞ {currentCard + 1}/{vocabularyCards.length}
                  </span>
                  <Badge variant="outline" className="gap-1">
                    {vocabularyCards[currentCard].category}
                  </Badge>
                </div>
              </div>

              <div className="max-w-2xl mx-auto">
                <Card className="p-8 mb-6 min-h-[300px] flex flex-col justify-center">
                  <div className="text-center">
                    <h2 className="text-4xl font-bold mb-4">
                      {vocabularyCards[currentCard].english}
                    </h2>
                    
                    <div className="text-lg text-muted-foreground mb-4">
                      {vocabularyCards[currentCard].pronunciation}
                    </div>

                    {showTranslation && (
                      <div className="space-y-4">
                        <div className="text-3xl font-bold text-primary">
                          {vocabularyCards[currentCard].kazakh}
                        </div>
                        
                        <div className="bg-muted/50 p-4 rounded-lg">
                          <p className="text-sm text-muted-foreground mb-2">–ú—ã—Å–∞–ª:</p>
                          <p className="font-medium">
                            {vocabularyCards[currentCard].example}
                          </p>
                        </div>
                      </div>
                    )}
                  </div>
                </Card>

                <div className="flex gap-4 justify-center">
                  <Button 
                    onClick={toggleTranslation}
                    variant="outline"
                    className="gap-2"
                  >
                    {showTranslation ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                    {showTranslation ? "–ñ–∞—Å—ã—Ä—É" : "–ê—É–¥–∞—Ä–º–∞–Ω—ã –∫”©—Ä—Å–µ—Ç—É"}
                  </Button>
                </div>

                {showTranslation && (
                  <div className="flex gap-4 justify-center mt-6">
                    <Button 
                      onClick={markAsStudied}
                      className="gap-2"
                    >
                      <CheckCircle className="w-4 h-4" />
                      “Æ–π—Ä–µ–Ω–¥—ñ–º
                    </Button>
                    
                    <Button 
                      onClick={skipCard}
                      variant="outline"
                      className="gap-2"
                    >
                      <XCircle className="w-4 h-4" />
                      ”®—Ç–∫—ñ–∑—É
                    </Button>
                  </div>
                )}
              </div>
            </Card>
          )}

          {isComplete && (
            <Card className="p-8 text-center bg-success/10 border-success">
              <Trophy className="w-16 h-16 text-success mx-auto mb-4" />
              <h2 className="text-3xl font-bold mb-4">–¢–∞–º–∞—à–∞! üéâ</h2>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div className="bg-background p-4 rounded-lg">
                  <div className="text-2xl font-bold text-success">{studiedCards.length}/{vocabularyCards.length}</div>
                  <div className="text-sm text-muted-foreground">“Æ–π—Ä–µ–Ω–≥–µ–Ω —Å”©–∑–¥–µ—Ä</div>
                </div>
                <div className="bg-background p-4 rounded-lg">
                  <div className="text-2xl font-bold text-primary">{formatTime(time)}</div>
                  <div className="text-sm text-muted-foreground">–£–∞“õ—ã—Ç</div>
                </div>
                <div className="bg-background p-4 rounded-lg">
                  <div className="text-2xl font-bold text-blue-500">{getProgress()}%</div>
                  <div className="text-sm text-muted-foreground">–ü—Ä–æ–≥—Ä–µ—Å—Å</div>
                </div>
              </div>
              <Button onClick={resetGame} size="lg" className="gap-2">
                <RotateCcw className="w-5 h-5" />
                “ö–∞–π—Ç–∞ –æ–π–Ω–∞—É
              </Button>
            </Card>
          )}

          <Card className="p-6 bg-muted/30">
            <h3 className="font-bold text-lg mb-3">üìñ –û–π—ã–Ω –µ—Ä–µ–∂–µ–ª–µ—Ä—ñ:</h3>
            <ul className="space-y-2 text-muted-foreground">
              <li>‚Ä¢ –ö–∞—Ä—Ç–æ—á–∫–∞–Ω—ã –∫”©—Ä—ñ–ø, —Å”©–∑–¥—ñ –µ—Å—Ç–µ —Å–∞“õ—Ç–∞“£—ã–∑</li>
              <li>‚Ä¢ "–ê—É–¥–∞—Ä–º–∞–Ω—ã –∫”©—Ä—Å–µ—Ç—É" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã–ø, –∂–∞—É–∞–ø—Ç—ã —Ç–µ–∫—Å–µ—Ä—ñ“£—ñ–∑</li>
              <li>‚Ä¢ –°”©–∑–¥—ñ “Ø–π—Ä–µ–Ω—Å–µ“£—ñ–∑, "“Æ–π—Ä–µ–Ω–¥—ñ–º" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑</li>
              <li>‚Ä¢ –ö–µ—Ä–µ–∫ –±–æ–ª–º–∞—Å–∞, "”®—Ç–∫—ñ–∑—É" –±–∞—Ç—ã—Ä–º–∞—Å—ã–Ω –±–∞—Å—ã“£—ã–∑</li>
              <li>‚Ä¢ –ë–∞—Ä–ª—ã“õ –∫–∞—Ä—Ç–æ—á–∫–∞–ª–∞—Ä–¥—ã –∞—è“õ—Ç–∞“ì–∞–Ω–¥–∞ –æ–π—ã–Ω –∞—è“õ—Ç–∞–ª–∞–¥—ã</li>
            </ul>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default VocabularyFlashcards;



